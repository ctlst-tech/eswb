/**
 * Gets computed translate values
 * @param {HTMLElement} element
 * @returns {Object}
 */
function getTranslateValues (element) {
  const style = window.getComputedStyle(element)
  const matrix = style['transform'] || style.webkitTransform || style.mozTransform

  // No transform property. Simply return 0 values.
  if (matrix === 'none' || typeof matrix === 'undefined') {
    return {
      x: 0,
      y: 0,
      z: 0
    }
  }

  // Can either be 2d or 3d transform
  const matrixType = matrix.includes('3d') ? '3d' : '2d'
  const matrixValues = matrix.match(/matrix.*\((.+)\)/)[1].split(', ')

  // 2d matrices have 6 values
  // Last 2 values are X and Y.
  // 2d matrices does not have Z value.
  if (matrixType === '2d') {
    return {
      x: matrixValues[4],
      y: matrixValues[5],
      z: 0
    }
  }

  // 3d matrices have 16 values
  // The 13th, 14th, and 15th values are X, Y, and Z
  if (matrixType === '3d') {
    return {
      x: matrixValues[12],
      y: matrixValues[13],
      z: matrixValues[14]
    }
  }
}

function _map() {
	const map = {{ id }};
	return map;
}

const _markers = {}
const _polys = {}

function _addPolyline(id, latlngs, color='red') {
	if(_polys[id]) return false;

    var polyline = L.polyline(latlngs, {color: color, smoothFactor: 0.0, weight: 1}).addTo(_map());

	_polys[id] = polyline;
}

function _updatePolyline(id, latlngs) {
 if(!_polys[id]) return false;
 var polyline = _polys[id];
 polyline.setLatLngs(latlngs);
}

function _removePolyline(id) {
	if(!_polys[id]) return false;
	var polyline = _polys[id];
	polyline.remove();
	delete _polys[id];
}

function _fitPolyline(id) {
	if(!_polys[id]) return false;
	var polyline = _polys[id];
	_map().fitBounds(polyline.getBounds());
}

function _addMarker(id, url, loc, wsize=40, hsize=40) {
	if(_markers[id]) return false;

	const myIcon = L.icon({
		iconUrl: url,
		iconSize: [wsize, hsize]
	});

    const marker = L.marker(loc, {icon: myIcon, title: id});
	marker.addTo(_map());
	marker._icon.style['filter'] = 'drop-shadow(2px 2px 1px rgba(0,0,0,0.2))'
	_markers[id] = marker;
}

function _rotateMarker(id, angle) {
	if(!_markers[id]) return false;
	marker = _markers[id];
	console.log(marker);
	const {x, y, z} = getTranslateValues(marker._icon);
	console.log(x, y, z);
	marker._icon.style['transform-origin'] = '50% 50%';
	marker._icon.style['transform'] = "translate3d(" + x + "px, " + y + "px, " + z + "px) rotate(" + angle + "deg)";
}

function _moveMarker(id, loc) {
	if(!_markers[id]) return false;
	marker = _markers[id];
	marker.setLatLng(loc).update();
}

function _removeMarker(id) {
	if(!_markers[id]) return false;
	marker = _markers[id];
	_map().removeLayer(marker);
	delete _markers[id];
}

function _zoomTo(z=14) {
	_map().setZoom(z);
}

function _jumpTo(v, z=14, d=0.8) {
    if(d < 0.1) {
    	_map().panTo(v, z);
    } else {
		_map().flyTo(v, z, {
			animate: true,
			duration: d
		});
	}
}

